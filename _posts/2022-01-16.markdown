---

layout: single
title:  ""
categories: blog

---

# 서비스 영역에 대한 이해

## 서비스 레이어란?

서비스 영역은 단순히 도메인의 **핵심 비즈니스 코드**를 담당하는 영역이 아니라 인프라스트럭처(데이터베이스) 영역과 도메인 영역을 연결해주는 **매개체 역할**이다.

우리가 Member를 통해 회원가입(객체 생성), 프로필 수정(객체 수정) 등의 행위가 가능하지만 그것을 영속화 하기 위한 공간으로서 서비스 레이어가 존재한다.

**Member 객체에 대한 제어는 Member 스스로 제어해야 한다.**

## 서비스 레이어의 적절한 크기

 -> 단순하게 설명하면 대체 가능한 크기여야 한다.

### 행위 기반으로 네이밍

서비스가 무엇을 하는지 알 수 있도록 네이밍을 한다면 이 서비스가 가지고 있는 책임의 크기를 설명할 수 있다.

`MemberService` 라는 네이밍을 많이 사용하지만, 좋지만은 않다. 해당 클래스의 책임이 불문명하여 관련있는 모든 로직이 `MemberService`로 모이게 되며 그 결과 외부 객체에서 `MemberService`를 의존하게 된다. 이에 따라 메서드 라인 수도 증가하며 테스트 코드 또한 작성하기 쉽지 않다.

따라서 만약 조회에 대한 책임을 부여하고 싶다면 `MemberFindService`라고 네이밍을 하여 서비스의 행위가 객체의 책임으로 분명하게 하므로써 무엇을 추후에 대체 가능한 클래스로 만들지 기여할 수 있다.

객체 지향의 SOLID 5대 원칙 중 하나인 `단일 책임 원칙(SRP)`([관련 링크](https://steady-coding.tistory.com/370))을 따르기 위한 구조로 짜야한다.

## 정리를 해보자면 

 서비스의 적절한 크기는 대체 가능성을 염두해야 하고 이를 위해 행위 기반의 책임을 할당하게 된다면 자연스럽게 서비스의 적절한 크기를 찾아갈 수 있다.

 단순히 이것만으로 올바른 객체지향 설계가 되는 것은 아니지만 최소한의 객체지향 프로그래밍으로 가는 시발점이 될 수 있다.

 만약 어떠한 기능이 다음에도 추가되어 또 사용되어 진다면 interface를 두어 정리하자. 예를들어 내 기준엔 최근 oAuth 2.0 로그인 기능 Token을 받아와서 profile을 만드는 과정까지 interface로 기본적인 기능을 만들고 구체화 하여 카카오 로그인을 만들 수 있었다.(물론 facebook, google은 라이브러리가 있어서 쓰지 않아도 된다.)

 정확한 이해 방법은 아니나 깃허브를 참고하여 객체지향에 대한 정확하고 올바른 이해가 필요할 것 같다.